{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8080/api/steganography';const api=axios.create({baseURL:API_BASE_URL,timeout:30000});export const steganographyAPI={// Hide text in image\nhideText:async(imageFile,text)=>{const formData=new FormData();formData.append('image',imageFile);formData.append('text',text);const response=await api.post('/hide',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Extract and verify text from image\nextractText:async(imageFile,transactionHash)=>{const formData=new FormData();formData.append('image',imageFile);formData.append('transactionHash',transactionHash);const response=await api.post('/extract',formData,{headers:{'Content-Type':'multipart/form-data'}});return response.data;},// Verify text integrity\nverifyText:async(text,transactionHash)=>{const formData=new FormData();formData.append('text',text);formData.append('transactionHash',transactionHash);const response=await api.post('/verify',formData);return response.data;},// Get all records\ngetAllRecords:async()=>{const response=await api.get('/records');return response.data;},// Get record by ID\ngetRecordById:async id=>{const response=await api.get(\"/records/\".concat(id));return response.data;},// Get record by transaction hash\ngetRecordByTransactionHash:async transactionHash=>{const response=await api.get(\"/records/transaction/\".concat(transactionHash));return response.data;},// Generate hash\ngenerateHash:async text=>{const formData=new FormData();formData.append('text',text);const response=await api.post('/hash',formData);return response.data;},// Health check\nhealthCheck:async()=>{const response=await api.get('/health');return response.data;},// Download steganographic image\ndownloadImage:async(recordId,fileName)=>{const response=await api.get(\"/download/\".concat(recordId),{responseType:'blob'});return response.data;}};export default steganographyAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","steganographyAPI","hideText","imageFile","text","formData","FormData","append","response","post","headers","data","extractText","transactionHash","verifyText","getAllRecords","get","getRecordById","id","concat","getRecordByTransactionHash","generateHash","healthCheck","downloadImage","recordId","fileName","responseType"],"sources":["/Users/jahnavisingh/stangonograpy /frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/steganography';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\nexport interface SteganographyRecord {\n  id: string;\n  fileName: string;\n  textHash: string;\n  transactionHash: string;\n  blockchainAddress: string;\n  createdAt: string;\n  status: string;\n  originalFileName: string;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data?: T;\n  record?: SteganographyRecord;\n  records?: SteganographyRecord[];\n  extractedText?: string;\n  verified?: boolean;\n  hash?: string;\n  timestamp?: number;\n  count?: number;\n}\n\nexport const steganographyAPI = {\n  // Hide text in image\n  hideText: async (imageFile: File, text: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('text', text);\n    \n    const response = await api.post('/hide', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    return response.data;\n  },\n\n  // Extract and verify text from image\n  extractText: async (imageFile: File, transactionHash: string): Promise<ApiResponse<string>> => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('transactionHash', transactionHash);\n    \n    const response = await api.post('/extract', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    return response.data;\n  },\n\n  // Verify text integrity\n  verifyText: async (text: string, transactionHash: string): Promise<ApiResponse<boolean>> => {\n    const formData = new FormData();\n    formData.append('text', text);\n    formData.append('transactionHash', transactionHash);\n    \n    const response = await api.post('/verify', formData);\n    return response.data;\n  },\n\n  // Get all records\n  getAllRecords: async (): Promise<ApiResponse<SteganographyRecord[]>> => {\n    const response = await api.get('/records');\n    return response.data;\n  },\n\n  // Get record by ID\n  getRecordById: async (id: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const response = await api.get(`/records/${id}`);\n    return response.data;\n  },\n\n  // Get record by transaction hash\n  getRecordByTransactionHash: async (transactionHash: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const response = await api.get(`/records/transaction/${transactionHash}`);\n    return response.data;\n  },\n\n  // Generate hash\n  generateHash: async (text: string): Promise<ApiResponse<string>> => {\n    const formData = new FormData();\n    formData.append('text', text);\n    \n    const response = await api.post('/hash', formData);\n    return response.data;\n  },\n\n  // Health check\n  healthCheck: async (): Promise<ApiResponse<any>> => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n\n  // Download steganographic image\n  downloadImage: async (recordId: string, fileName: string): Promise<Blob> => {\n    const response = await api.get(`/download/${recordId}`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n};\n\nexport default steganographyAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}