{"ast":null,"code":"import React,{useState}from'react';import{steganographyAPI}from'../services/api';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ExtractTextComponent=()=>{const[imageFile,setImageFile]=useState(null);const[transactionHash,setTransactionHash]=useState('');const[loading,setLoading]=useState(false);const[extractedText,setExtractedText]=useState('');const[verified,setVerified]=useState(null);const[error,setError]=useState('');const handleImageChange=event=>{var _event$target$files;const file=(_event$target$files=event.target.files)===null||_event$target$files===void 0?void 0:_event$target$files[0];if(file){if(file.type!=='image/png'){setError('Please select a PNG image file');return;}setImageFile(file);setError('');}};const handleSubmit=async event=>{event.preventDefault();if(!imageFile||!transactionHash.trim()){setError('Please provide both an image and transaction hash');return;}setLoading(true);setError('');setExtractedText('');setVerified(null);try{const response=await steganographyAPI.extractText(imageFile,transactionHash.trim());if(response.success){setExtractedText(response.extractedText||'');setVerified(response.verified||false);}else{setError(response.message||'Failed to extract text');setVerified(false);}}catch(error){var _error$response,_error$response$data;console.error('Error extracting text:',error);setError(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Failed to extract text from image');setVerified(false);}finally{setLoading(false);}};const copyToClipboard=text=>{navigator.clipboard.writeText(text).then(()=>{alert('Text copied to clipboard!');});};return/*#__PURE__*/_jsxs(\"div\",{className:\"component-card\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Extract & Verify Text\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Upload a steganographic PNG image and provide the transaction hash to extract and verify the hidden text.\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Steganographic PNG Image\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"file-input-wrapper\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"extract-image-input\",className:\"file-input\",accept:\"image/png\",onChange:handleImageChange}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"extract-image-input\",className:\"file-input-label \".concat(imageFile?'has-file':''),children:imageFile?\"Selected: \".concat(imageFile.name):'üìÅ Click to select PNG image'})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Transaction Hash\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:transactionHash,onChange:e=>setTransactionHash(e.target.value),placeholder:\"Enter transaction hash (FALLBACK_... or 0x...)\",required:true}),/*#__PURE__*/_jsx(\"small\",{style:{color:'#888',fontSize:'0.9rem',marginTop:'0.5rem',display:'block'},children:\"\\uD83D\\uDCA1 Tip: You can find the transaction hash in the \\\"Records\\\" tab after hiding text\"})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn\",disabled:loading||!imageFile||!transactionHash.trim(),children:loading?'Extracting & Verifying...':'üîç Extract & Verify Text'})]}),loading&&/*#__PURE__*/_jsxs(\"div\",{className:\"loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-bar\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-fill\",style:{width:'70%'}})}),\"Extracting text and verifying against blockchain...\"]}),error&&/*#__PURE__*/_jsx(\"div\",{className:\"error\",children:error}),extractedText&&/*#__PURE__*/_jsxs(\"div\",{className:verified?'success':'error',children:[/*#__PURE__*/_jsx(\"h3\",{children:verified?'‚úÖ Text Verified Successfully!':'‚ùå Verification Failed!'}),/*#__PURE__*/_jsxs(\"div\",{className:\"result-card\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Verification Status:\"}),/*#__PURE__*/_jsx(\"span\",{style:{color:verified?'#51cf66':'#ff6b6b',marginLeft:'0.5rem'},children:verified?'VERIFIED':'FAILED'})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'1rem'},children:[/*#__PURE__*/_jsx(\"label\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Extracted Text:\"})}),/*#__PURE__*/_jsx(\"textarea\",{value:extractedText,readOnly:true,style:{marginTop:'0.5rem',backgroundColor:'rgba(255, 255, 255, 0.1)',border:\"1px solid \".concat(verified?'rgba(0, 255, 0, 0.3)':'rgba(255, 0, 0, 0.3)'),minHeight:'120px'}})]}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'1rem'},children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-secondary\",onClick:()=>copyToClipboard(extractedText),children:\"\\uD83D\\uDCCB Copy Text\"})}),/*#__PURE__*/_jsx(\"div\",{style:{marginTop:'1rem',fontSize:'0.9rem',opacity:0.8},children:verified?/*#__PURE__*/_jsxs(_Fragment,{children:[\"\\uD83D\\uDCA1 \",/*#__PURE__*/_jsx(\"strong\",{children:\"Success:\"}),\" The text integrity has been verified against the blockchain record.\"]}):/*#__PURE__*/_jsxs(_Fragment,{children:[\"\\u26A0\\uFE0F \",/*#__PURE__*/_jsx(\"strong\",{children:\"Warning:\"}),\" The text may have been tampered with or the transaction hash is incorrect.\"]})})]})]})]});};export default ExtractTextComponent;","map":{"version":3,"names":["React","useState","steganographyAPI","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ExtractTextComponent","imageFile","setImageFile","transactionHash","setTransactionHash","loading","setLoading","extractedText","setExtractedText","verified","setVerified","error","setError","handleImageChange","event","_event$target$files","file","target","files","type","handleSubmit","preventDefault","trim","response","extractText","success","message","_error$response","_error$response$data","console","data","copyToClipboard","text","navigator","clipboard","writeText","then","alert","className","children","onSubmit","id","accept","onChange","htmlFor","concat","name","value","e","placeholder","required","style","color","fontSize","marginTop","display","disabled","width","marginLeft","readOnly","backgroundColor","border","minHeight","onClick","opacity"],"sources":["/Users/jahnavisingh/stangonograpy /frontend/src/components/ExtractTextComponent.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { steganographyAPI } from '../services/api';\n\nconst ExtractTextComponent: React.FC = () => {\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [transactionHash, setTransactionHash] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [extractedText, setExtractedText] = useState<string>('');\n  const [verified, setVerified] = useState<boolean | null>(null);\n  const [error, setError] = useState<string>('');\n\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type !== 'image/png') {\n        setError('Please select a PNG image file');\n        return;\n      }\n      setImageFile(file);\n      setError('');\n    }\n  };\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    \n    if (!imageFile || !transactionHash.trim()) {\n      setError('Please provide both an image and transaction hash');\n      return;\n    }\n\n    setLoading(true);\n    setError('');\n    setExtractedText('');\n    setVerified(null);\n\n    try {\n      const response = await steganographyAPI.extractText(imageFile, transactionHash.trim());\n      \n      if (response.success) {\n        setExtractedText(response.extractedText || '');\n        setVerified(response.verified || false);\n      } else {\n        setError(response.message || 'Failed to extract text');\n        setVerified(false);\n      }\n    } catch (error: any) {\n      console.error('Error extracting text:', error);\n      setError(error.response?.data?.message || 'Failed to extract text from image');\n      setVerified(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Text copied to clipboard!');\n    });\n  };\n\n  return (\n    <div className=\"component-card\">\n      <h2>Extract & Verify Text</h2>\n      <p>Upload a steganographic PNG image and provide the transaction hash to extract and verify the hidden text.</p>\n      \n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label>Steganographic PNG Image</label>\n          <div className=\"file-input-wrapper\">\n            <input\n              type=\"file\"\n              id=\"extract-image-input\"\n              className=\"file-input\"\n              accept=\"image/png\"\n              onChange={handleImageChange}\n            />\n            <label \n              htmlFor=\"extract-image-input\" \n              className={`file-input-label ${imageFile ? 'has-file' : ''}`}\n            >\n              {imageFile ? `Selected: ${imageFile.name}` : 'üìÅ Click to select PNG image'}\n            </label>\n          </div>\n        </div>\n\n        <div className=\"form-group\">\n          <label>Transaction Hash</label>\n          <input\n            type=\"text\"\n            value={transactionHash}\n            onChange={(e) => setTransactionHash(e.target.value)}\n            placeholder=\"Enter transaction hash (FALLBACK_... or 0x...)\"\n            required\n          />\n          <small style={{color: '#888', fontSize: '0.9rem', marginTop: '0.5rem', display: 'block'}}>\n            üí° Tip: You can find the transaction hash in the \"Records\" tab after hiding text\n          </small>\n        </div>\n\n        <button type=\"submit\" className=\"btn\" disabled={loading || !imageFile || !transactionHash.trim()}>\n          {loading ? 'Extracting & Verifying...' : 'üîç Extract & Verify Text'}\n        </button>\n      </form>\n\n      {loading && (\n        <div className=\"loading\">\n          <div className=\"progress-bar\">\n            <div className=\"progress-fill\" style={{width: '70%'}}></div>\n          </div>\n          Extracting text and verifying against blockchain...\n        </div>\n      )}\n\n      {error && <div className=\"error\">{error}</div>}\n\n      {extractedText && (\n        <div className={verified ? 'success' : 'error'}>\n          <h3>{verified ? '‚úÖ Text Verified Successfully!' : '‚ùå Verification Failed!'}</h3>\n          <div className=\"result-card\">\n            <p><strong>Verification Status:</strong> \n              <span style={{color: verified ? '#51cf66' : '#ff6b6b', marginLeft: '0.5rem'}}>\n                {verified ? 'VERIFIED' : 'FAILED'}\n              </span>\n            </p>\n            \n            <div style={{marginTop: '1rem'}}>\n              <label><strong>Extracted Text:</strong></label>\n              <textarea\n                value={extractedText}\n                readOnly\n                style={{\n                  marginTop: '0.5rem',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)',\n                  border: `1px solid ${verified ? 'rgba(0, 255, 0, 0.3)' : 'rgba(255, 0, 0, 0.3)'}`,\n                  minHeight: '120px'\n                }}\n              />\n            </div>\n            \n            <div style={{marginTop: '1rem'}}>\n              <button className=\"btn btn-secondary\" onClick={() => copyToClipboard(extractedText)}>\n                üìã Copy Text\n              </button>\n            </div>\n            \n            <div style={{marginTop: '1rem', fontSize: '0.9rem', opacity: 0.8}}>\n              {verified ? (\n                <>\n                  üí° <strong>Success:</strong> The text integrity has been verified against the blockchain record.\n                </>\n              ) : (\n                <>\n                  ‚ö†Ô∏è <strong>Warning:</strong> The text may have been tampered with or the transaction hash is incorrect.\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ExtractTextComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,OAASC,gBAAgB,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,CAAAC,QAAA,IAAAC,SAAA,yBAEnD,KAAM,CAAAC,oBAA8B,CAAGA,CAAA,GAAM,CAC3C,KAAM,CAACC,SAAS,CAAEC,YAAY,CAAC,CAAGV,QAAQ,CAAc,IAAI,CAAC,CAC7D,KAAM,CAACW,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAS,EAAE,CAAC,CAClE,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAU,KAAK,CAAC,CACtD,KAAM,CAACe,aAAa,CAAEC,gBAAgB,CAAC,CAAGhB,QAAQ,CAAS,EAAE,CAAC,CAC9D,KAAM,CAACiB,QAAQ,CAAEC,WAAW,CAAC,CAAGlB,QAAQ,CAAiB,IAAI,CAAC,CAC9D,KAAM,CAACmB,KAAK,CAAEC,QAAQ,CAAC,CAAGpB,QAAQ,CAAS,EAAE,CAAC,CAE9C,KAAM,CAAAqB,iBAAiB,CAAIC,KAA0C,EAAK,KAAAC,mBAAA,CACxE,KAAM,CAAAC,IAAI,EAAAD,mBAAA,CAAGD,KAAK,CAACG,MAAM,CAACC,KAAK,UAAAH,mBAAA,iBAAlBA,mBAAA,CAAqB,CAAC,CAAC,CACpC,GAAIC,IAAI,CAAE,CACR,GAAIA,IAAI,CAACG,IAAI,GAAK,WAAW,CAAE,CAC7BP,QAAQ,CAAC,gCAAgC,CAAC,CAC1C,OACF,CACAV,YAAY,CAACc,IAAI,CAAC,CAClBJ,QAAQ,CAAC,EAAE,CAAC,CACd,CACF,CAAC,CAED,KAAM,CAAAQ,YAAY,CAAG,KAAO,CAAAN,KAAsB,EAAK,CACrDA,KAAK,CAACO,cAAc,CAAC,CAAC,CAEtB,GAAI,CAACpB,SAAS,EAAI,CAACE,eAAe,CAACmB,IAAI,CAAC,CAAC,CAAE,CACzCV,QAAQ,CAAC,mDAAmD,CAAC,CAC7D,OACF,CAEAN,UAAU,CAAC,IAAI,CAAC,CAChBM,QAAQ,CAAC,EAAE,CAAC,CACZJ,gBAAgB,CAAC,EAAE,CAAC,CACpBE,WAAW,CAAC,IAAI,CAAC,CAEjB,GAAI,CACF,KAAM,CAAAa,QAAQ,CAAG,KAAM,CAAA9B,gBAAgB,CAAC+B,WAAW,CAACvB,SAAS,CAAEE,eAAe,CAACmB,IAAI,CAAC,CAAC,CAAC,CAEtF,GAAIC,QAAQ,CAACE,OAAO,CAAE,CACpBjB,gBAAgB,CAACe,QAAQ,CAAChB,aAAa,EAAI,EAAE,CAAC,CAC9CG,WAAW,CAACa,QAAQ,CAACd,QAAQ,EAAI,KAAK,CAAC,CACzC,CAAC,IAAM,CACLG,QAAQ,CAACW,QAAQ,CAACG,OAAO,EAAI,wBAAwB,CAAC,CACtDhB,WAAW,CAAC,KAAK,CAAC,CACpB,CACF,CAAE,MAAOC,KAAU,CAAE,KAAAgB,eAAA,CAAAC,oBAAA,CACnBC,OAAO,CAAClB,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9CC,QAAQ,CAAC,EAAAe,eAAA,CAAAhB,KAAK,CAACY,QAAQ,UAAAI,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBG,IAAI,UAAAF,oBAAA,iBAApBA,oBAAA,CAAsBF,OAAO,GAAI,mCAAmC,CAAC,CAC9EhB,WAAW,CAAC,KAAK,CAAC,CACpB,CAAC,OAAS,CACRJ,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED,KAAM,CAAAyB,eAAe,CAAIC,IAAY,EAAK,CACxCC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,IAAI,CAAC,CAACI,IAAI,CAAC,IAAM,CAC7CC,KAAK,CAAC,2BAA2B,CAAC,CACpC,CAAC,CAAC,CACJ,CAAC,CAED,mBACExC,KAAA,QAAKyC,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAC7B5C,IAAA,OAAA4C,QAAA,CAAI,uBAAqB,CAAI,CAAC,cAC9B5C,IAAA,MAAA4C,QAAA,CAAG,2GAAyG,CAAG,CAAC,cAEhH1C,KAAA,SAAM2C,QAAQ,CAAEpB,YAAa,CAAAmB,QAAA,eAC3B1C,KAAA,QAAKyC,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzB5C,IAAA,UAAA4C,QAAA,CAAO,0BAAwB,CAAO,CAAC,cACvC1C,KAAA,QAAKyC,SAAS,CAAC,oBAAoB,CAAAC,QAAA,eACjC5C,IAAA,UACEwB,IAAI,CAAC,MAAM,CACXsB,EAAE,CAAC,qBAAqB,CACxBH,SAAS,CAAC,YAAY,CACtBI,MAAM,CAAC,WAAW,CAClBC,QAAQ,CAAE9B,iBAAkB,CAC7B,CAAC,cACFlB,IAAA,UACEiD,OAAO,CAAC,qBAAqB,CAC7BN,SAAS,qBAAAO,MAAA,CAAsB5C,SAAS,CAAG,UAAU,CAAG,EAAE,CAAG,CAAAsC,QAAA,CAE5DtC,SAAS,cAAA4C,MAAA,CAAgB5C,SAAS,CAAC6C,IAAI,EAAK,8BAA8B,CACtE,CAAC,EACL,CAAC,EACH,CAAC,cAENjD,KAAA,QAAKyC,SAAS,CAAC,YAAY,CAAAC,QAAA,eACzB5C,IAAA,UAAA4C,QAAA,CAAO,kBAAgB,CAAO,CAAC,cAC/B5C,IAAA,UACEwB,IAAI,CAAC,MAAM,CACX4B,KAAK,CAAE5C,eAAgB,CACvBwC,QAAQ,CAAGK,CAAC,EAAK5C,kBAAkB,CAAC4C,CAAC,CAAC/B,MAAM,CAAC8B,KAAK,CAAE,CACpDE,WAAW,CAAC,gDAAgD,CAC5DC,QAAQ,MACT,CAAC,cACFvD,IAAA,UAAOwD,KAAK,CAAE,CAACC,KAAK,CAAE,MAAM,CAAEC,QAAQ,CAAE,QAAQ,CAAEC,SAAS,CAAE,QAAQ,CAAEC,OAAO,CAAE,OAAO,CAAE,CAAAhB,QAAA,CAAC,8FAE1F,CAAO,CAAC,EACL,CAAC,cAEN5C,IAAA,WAAQwB,IAAI,CAAC,QAAQ,CAACmB,SAAS,CAAC,KAAK,CAACkB,QAAQ,CAAEnD,OAAO,EAAI,CAACJ,SAAS,EAAI,CAACE,eAAe,CAACmB,IAAI,CAAC,CAAE,CAAAiB,QAAA,CAC9FlC,OAAO,CAAG,2BAA2B,CAAG,0BAA0B,CAC7D,CAAC,EACL,CAAC,CAENA,OAAO,eACNR,KAAA,QAAKyC,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtB5C,IAAA,QAAK2C,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC3B5C,IAAA,QAAK2C,SAAS,CAAC,eAAe,CAACa,KAAK,CAAE,CAACM,KAAK,CAAE,KAAK,CAAE,CAAM,CAAC,CACzD,CAAC,sDAER,EAAK,CACN,CAEA9C,KAAK,eAAIhB,IAAA,QAAK2C,SAAS,CAAC,OAAO,CAAAC,QAAA,CAAE5B,KAAK,CAAM,CAAC,CAE7CJ,aAAa,eACZV,KAAA,QAAKyC,SAAS,CAAE7B,QAAQ,CAAG,SAAS,CAAG,OAAQ,CAAA8B,QAAA,eAC7C5C,IAAA,OAAA4C,QAAA,CAAK9B,QAAQ,CAAG,+BAA+B,CAAG,wBAAwB,CAAK,CAAC,cAChFZ,KAAA,QAAKyC,SAAS,CAAC,aAAa,CAAAC,QAAA,eAC1B1C,KAAA,MAAA0C,QAAA,eAAG5C,IAAA,WAAA4C,QAAA,CAAQ,sBAAoB,CAAQ,CAAC,cACtC5C,IAAA,SAAMwD,KAAK,CAAE,CAACC,KAAK,CAAE3C,QAAQ,CAAG,SAAS,CAAG,SAAS,CAAEiD,UAAU,CAAE,QAAQ,CAAE,CAAAnB,QAAA,CAC1E9B,QAAQ,CAAG,UAAU,CAAG,QAAQ,CAC7B,CAAC,EACN,CAAC,cAEJZ,KAAA,QAAKsD,KAAK,CAAE,CAACG,SAAS,CAAE,MAAM,CAAE,CAAAf,QAAA,eAC9B5C,IAAA,UAAA4C,QAAA,cAAO5C,IAAA,WAAA4C,QAAA,CAAQ,iBAAe,CAAQ,CAAC,CAAO,CAAC,cAC/C5C,IAAA,aACEoD,KAAK,CAAExC,aAAc,CACrBoD,QAAQ,MACRR,KAAK,CAAE,CACLG,SAAS,CAAE,QAAQ,CACnBM,eAAe,CAAE,0BAA0B,CAC3CC,MAAM,cAAAhB,MAAA,CAAepC,QAAQ,CAAG,sBAAsB,CAAG,sBAAsB,CAAE,CACjFqD,SAAS,CAAE,OACb,CAAE,CACH,CAAC,EACC,CAAC,cAENnE,IAAA,QAAKwD,KAAK,CAAE,CAACG,SAAS,CAAE,MAAM,CAAE,CAAAf,QAAA,cAC9B5C,IAAA,WAAQ2C,SAAS,CAAC,mBAAmB,CAACyB,OAAO,CAAEA,CAAA,GAAMhC,eAAe,CAACxB,aAAa,CAAE,CAAAgC,QAAA,CAAC,wBAErF,CAAQ,CAAC,CACN,CAAC,cAEN5C,IAAA,QAAKwD,KAAK,CAAE,CAACG,SAAS,CAAE,MAAM,CAAED,QAAQ,CAAE,QAAQ,CAAEW,OAAO,CAAE,GAAG,CAAE,CAAAzB,QAAA,CAC/D9B,QAAQ,cACPZ,KAAA,CAAAE,SAAA,EAAAwC,QAAA,EAAE,eACG,cAAA5C,IAAA,WAAA4C,QAAA,CAAQ,UAAQ,CAAQ,CAAC,uEAC9B,EAAE,CAAC,cAEH1C,KAAA,CAAAE,SAAA,EAAAwC,QAAA,EAAE,eACG,cAAA5C,IAAA,WAAA4C,QAAA,CAAQ,UAAQ,CAAQ,CAAC,8EAC9B,EAAE,CACH,CACE,CAAC,EACH,CAAC,EACH,CACN,EACE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvC,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}