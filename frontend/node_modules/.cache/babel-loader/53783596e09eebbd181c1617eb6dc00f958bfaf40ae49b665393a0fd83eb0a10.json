{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/steganography';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000\n});\nexport const steganographyAPI = {\n  // Hide text in image\n  hideText: async (imageFile, text) => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('text', text);\n    const response = await api.post('/hide', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Extract and verify text from image\n  extractText: async (imageFile, transactionHash) => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('transactionHash', transactionHash);\n    const response = await api.post('/extract', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // Verify text integrity\n  verifyText: async (text, transactionHash) => {\n    const formData = new FormData();\n    formData.append('text', text);\n    formData.append('transactionHash', transactionHash);\n    const response = await api.post('/verify', formData);\n    return response.data;\n  },\n  // Get all records\n  getAllRecords: async () => {\n    const response = await api.get('/records');\n    return response.data;\n  },\n  // Get record by ID\n  getRecordById: async id => {\n    const response = await api.get(`/records/${id}`);\n    return response.data;\n  },\n  // Get record by transaction hash\n  getRecordByTransactionHash: async transactionHash => {\n    const response = await api.get(`/records/transaction/${transactionHash}`);\n    return response.data;\n  },\n  // Generate hash\n  generateHash: async text => {\n    const formData = new FormData();\n    formData.append('text', text);\n    const response = await api.post('/hash', formData);\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n  // Download steganographic image\n  downloadImage: async (recordId, fileName) => {\n    const response = await api.get(`/download/${recordId}`, {\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\nexport default steganographyAPI;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","steganographyAPI","hideText","imageFile","text","formData","FormData","append","response","post","headers","data","extractText","transactionHash","verifyText","getAllRecords","get","getRecordById","id","getRecordByTransactionHash","generateHash","healthCheck","downloadImage","recordId","fileName","responseType"],"sources":["/Users/jahnavisingh/stangonograpy /frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/steganography';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n});\n\nexport interface SteganographyRecord {\n  id: string;\n  fileName: string;\n  textHash: string;\n  transactionHash: string;\n  blockchainAddress: string;\n  createdAt: string;\n  status: string;\n  originalFileName: string;\n}\n\nexport interface ApiResponse<T> {\n  success: boolean;\n  message: string;\n  data?: T;\n  record?: SteganographyRecord;\n  records?: SteganographyRecord[];\n  extractedText?: string;\n  verified?: boolean;\n  hash?: string;\n  timestamp?: number;\n  count?: number;\n}\n\nexport const steganographyAPI = {\n  // Hide text in image\n  hideText: async (imageFile: File, text: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('text', text);\n    \n    const response = await api.post('/hide', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    return response.data;\n  },\n\n  // Extract and verify text from image\n  extractText: async (imageFile: File, transactionHash: string): Promise<ApiResponse<string>> => {\n    const formData = new FormData();\n    formData.append('image', imageFile);\n    formData.append('transactionHash', transactionHash);\n    \n    const response = await api.post('/extract', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    \n    return response.data;\n  },\n\n  // Verify text integrity\n  verifyText: async (text: string, transactionHash: string): Promise<ApiResponse<boolean>> => {\n    const formData = new FormData();\n    formData.append('text', text);\n    formData.append('transactionHash', transactionHash);\n    \n    const response = await api.post('/verify', formData);\n    return response.data;\n  },\n\n  // Get all records\n  getAllRecords: async (): Promise<ApiResponse<SteganographyRecord[]>> => {\n    const response = await api.get('/records');\n    return response.data;\n  },\n\n  // Get record by ID\n  getRecordById: async (id: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const response = await api.get(`/records/${id}`);\n    return response.data;\n  },\n\n  // Get record by transaction hash\n  getRecordByTransactionHash: async (transactionHash: string): Promise<ApiResponse<SteganographyRecord>> => {\n    const response = await api.get(`/records/transaction/${transactionHash}`);\n    return response.data;\n  },\n\n  // Generate hash\n  generateHash: async (text: string): Promise<ApiResponse<string>> => {\n    const formData = new FormData();\n    formData.append('text', text);\n    \n    const response = await api.post('/hash', formData);\n    return response.data;\n  },\n\n  // Health check\n  healthCheck: async (): Promise<ApiResponse<any>> => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n\n  // Download steganographic image\n  downloadImage: async (recordId: string, fileName: string): Promise<Blob> => {\n    const response = await api.get(`/download/${recordId}`, {\n      responseType: 'blob',\n    });\n    return response.data;\n  },\n};\n\nexport default steganographyAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}